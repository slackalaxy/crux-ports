--- grip-id3lib/meson.build	2021-08-31 14:02:53.000000000 -0000
+++ grip-taglib/meson.build	2022-04-24 12:53:16.164445335 -0000
@@ -23,32 +23,30 @@
 cxx = meson.get_compiler('cpp')
 
 libgtk_dep = dependency('gtk+-2.0', version: '>= 2.14')
-id3_dep = cxx.find_library('libid3', required: get_option('id3lib'))
+id3_dep = cxx.find_library('tag', required: get_option('id3lib'))
 curl_dep = dependency('libcurl')
 thread_dep = dependency('threads')
+cdparanoia_dep = dependency('libcdio_paranoia', required: get_option('cdparanoia'))
+cdparanoia_lflags = cc.find_library('cdio_paranoia', required: get_option('cdparanoia'))
+cdinterface_lflags = cc.find_library('cdio_cdda', required: get_option('cdparanoia'))
 
 cdparanoia_deps = []
 cdparanoia_found = false
-cdparanoia_dep = dependency('cdparanoia-3', version: '>= 10.2', required: get_option('cdparanoia'))
 
 if cdparanoia_dep.found()
   cdparanoia_deps = [cdparanoia_dep]
   cdparanoia_found = true
-else
-  cdparanoia_dep = cc.find_library('cdda_paranoia', required : get_option('cdparanoia'))
-  cdinterface_dep = cc.find_library('cdda_interface', required : get_option('cdparanoia'))
-  if cdparanoia_dep.found() and cdinterface_dep.found()
-    cdparanoia_deps = [cdparanoia_dep, cdinterface_dep]
-    cdparanoia_found = true
-  endif
+endif
+
+if cdparanoia_lflags.found() and cdinterface_lflags.found()
+    cdparanoia_deps = cdparanoia_deps + [cdparanoia_lflags, cdinterface_lflags]
 endif
 
 if cdparanoia_found
   # TODO: convert this to a CDPARANOIA_HEADERS_IN_DIR approach
-  config_h.set('HAVE_CDDA_INTERFACE_H', cc.has_header('cdda_paranoia.h'))
-  config_h.set('HAVE_CDDA_PARANOIA_H', cc.has_header('cdda_paranoia.h'))
-  config_h.set('HAVE_CDDA_CDDA_INTERFACE_H', cc.has_header('cdda/cdda_interface.h'))
-  config_h.set('HAVE_CDDA_CDDA_PARANOIA_H', cc.has_header('cdda/cdda_paranoia.h'))
+  config_h.set('HAVE_CDDA_INTERFACE_H', cc.has_header('cdio_paranoia.h'))
+  config_h.set('HAVE_CDDA_PARANOIA_H', cc.has_header('cdio_paranoia.h'))
+  config_h.set('HAVE_CDDA_CDDA_INTERFACE_H', cc.has_header('cdio_cdda.h'))
 endif
 
 check_headers = [
@@ -64,10 +62,11 @@
 endforeach
 
 configure_file(output: 'config.h', configuration: config_h)
-config_inc = include_directories('.')
+config_inc = include_directories('.','/usr/include/taglib')
 
 add_global_arguments(
   '-DG_LOG_DOMAIN="@0@"'.format(meson.project_name()),
+  '-fpermissive',
   language : ['c', 'cpp']
 )
 
--- grip-id3lib/src/meson.build	2020-01-25 10:38:53.000000000 -0000
+++ grip-taglib/src/meson.build	2022-04-24 06:04:39.087232533 -0000
@@ -1,21 +1,20 @@
 grip_sources = [
-  'cppmain.cc',
-  'main.c',
-  'grip.c',
-  'cddev.c',
-  'cdplay.c',
-  'discedit.c',
-  'rip.c',
-  'cdpar.c',
-  'id3.c',
-  'discdb.c',
-  'uihelper.c',
-  'dialog.c',
-  'gripcfg.c',
-  'parsecfg.c',
-  'launch.c',
-  'gain_analysis.c',
-  'tray.c',
+  'main.cc',
+  'id3.cc',
+  'grip.cc',
+  'cddev.cc',
+  'cdplay.cc',
+  'discedit.cc',
+  'rip.cc',
+  'cdpar.cc',
+  'discdb.cc',
+  'uihelper.cc',
+  'dialog.cc',
+  'gripcfg.cc',
+  'parsecfg.cc',
+  'launch.cc',
+  'gain_analysis.cc',
+  'tray.cc',
 ]
 
 grip = executable(
--- grip-id3lib/src/grip_id3.h	2018-05-20 11:34:00.000000000 -0000
+++ grip-taglib/src/grip_id3.h	2022-04-24 22:09:58.273800174 -0000
@@ -22,6 +22,17 @@
 
 #include <config.h>
 #include "glib.h"
+#include <tfile.h>
+#include <id3v1tag.h>
+#include <id3v2tag.h>
+#include <fileref.h>
+#include <flacfile.h>
+#include <mpegfile.h>
+#include <vorbisfile.h>
+#include <tag.h>
+#include <textidentificationframe.h>
+#include <commentsframe.h>
+#include <xiphcomment.h>
 
 typedef struct {
   char *name;
@@ -31,11 +42,9 @@
 gboolean ID3v1TagFile(char *filename,char *title,char *artist,char *album,
 		      char *year,char *comment,unsigned char genre,
 		      unsigned char tracknum, char *id3_encoding);
-#ifdef HAVE_ID3V2
 gboolean ID3v2TagFile(char *filename, char *title, char *artist, char *album,
 		      char *year, char *comment, unsigned char genre, unsigned
 		      char tracknum,char *id3v2_encoding);
-#endif
 char *ID3GenreString(int genre);
 ID3Genre *ID3GenreByNum(int num);
 int ID3GenreValue(char *genre);
--- grip-id3lib/src/id3.c	2020-01-15 22:59:07.000000000 -0000
+++ grip-taglib/src/id3.cc	2022-04-24 23:34:05.763356491 -0000
@@ -26,8 +26,6 @@
 #include <sys/stat.h>
 #include "grip_id3.h"
 
-static void ID3Put(char *dest,char *src,int len,char *encoding);
-
 /* this array contains string representations of all known ID3 tags */
 /* taken from mp3id3 in the mp3tools 0.7 package */
 
@@ -259,209 +257,78 @@
   unsigned char genre;
 } ID3v1Tag;
 
-#ifdef HAVE_ID3V2
-
-#include <id3.h>
 
 /* Things you might want to mess with. Surprisingly, the code will probably
    cope with you just messing with this section. */
 #define NUM_FRAMES 7
-static ID3_FrameID frameids[ NUM_FRAMES ] = {
-    ID3FID_TITLE, ID3FID_LEADARTIST, ID3FID_ALBUM, ID3FID_YEAR,
-    ID3FID_COMMENT, ID3FID_CONTENTTYPE, ID3FID_TRACKNUM
-};
 /* End of the section you're supposed to mess with */
 
+
 gboolean ID3v2TagFile(char *filename, char *title, char *artist, char *album,
 		      char *year, char *comment, unsigned char genre, unsigned
 		      char tracknum,char *id3v2_encoding)
 {
-  ID3Tag *tag;
-  ID3Field *field;
-  ID3Frame *frames[ NUM_FRAMES ];
+  TagLib::FileRef fp(filename);
   int i;
-  gboolean retval = TRUE;
-  mode_t mask;
-  char *conv_str;
+  char *GenreString;
+  TagLib::String Year;
   gsize rb,wb;
 
-  tag = ID3Tag_New();
+  if (!fp.isNull() && fp.tag()) {
+     TagLib::Tag *fptag = fp.tag();
+     fptag->setTitle((TagLib::String) title);
+     fptag->setArtist((TagLib::String) artist);
+     fptag->setAlbum((TagLib::String) album);
+     Year=(TagLib::String) year;
+     fptag->setYear(Year.toInt());
 
-  if(tag) {
-    ID3Tag_Link(tag,filename);
-    /* GRR. No error. */
-    
-    for ( i = 0; i < NUM_FRAMES; i++ ) {
-      frames[ i ] = ID3Frame_NewID( frameids[ i ] );
-      
-      if ( frames[ i ] ) {
-	char *c_data = NULL;
-	char gen[ 6 ] = "(   )"; /* max unsigned char: 255 */
-	char trk[ 4 ] = "  "; /* max CDDA tracks: 99 */
-	
-	switch( frameids[ i ] ) {
-	case ID3FID_TITLE:
-	  c_data = title;
-	  break;
-	  
-	case ID3FID_LEADARTIST:
-	  c_data = artist;
-	  break;
-	  
-	case ID3FID_ALBUM:
-	  c_data = album;
-	  break;
-	  
-	case ID3FID_YEAR:
-	  c_data = year;
-	  break;
-	  
-	case ID3FID_COMMENT:
-	  c_data = comment;
-	  break;
-	  
-	case ID3FID_CONTENTTYPE:
-	  c_data = gen;
-	  snprintf( gen, 6, "(%d)", genre );
-	  break;
-	  
-	case ID3FID_TRACKNUM:
-	  c_data = trk;
-	  snprintf( trk, 4, "%d", tracknum );
-	  break;
-	  
-	default:
-	  /* Doh! */
-	  g_printerr(_("unknown ID3 field\n"));
-	  break;
-	}
-	
-	if(c_data != NULL) {
-	  field = ID3Frame_GetField( frames[i], ID3FN_TEXT );
-
-	  if(field) {
-            /*            if(!strcasecmp(id3v2_encoding,"utf-8")) {
-	      ID3Field_SetUNICODE(field,(unicode_t *)c_data);
-	    }
-	    else {
-            */     
-
-            /* Always encode pretending it is ascii */
-            
-            conv_str=g_convert_with_fallback(c_data,strlen(c_data),id3v2_encoding,
-                               "utf-8",NULL,&rb,&wb,NULL);
-            
-            if(!conv_str) {
-              printf("***convert failed\n");
-
-              conv_str=strdup(c_data);
-            }
-
-            ID3Field_SetASCII(field,conv_str);
-            
-            g_free(conv_str);
-	  } else {
-	    retval = FALSE;
-	  }
-	}
-      } else { /* Frame->new() failed */
-	retval = FALSE;
-	break;
-      }
-    }
-    if ( retval != FALSE ) {
-      /* It would be really nice if I could have done something like
-	 ID3Tag_AddFrames( tag, frames, NUM_FRAMES ), but the
-	 prototypes work against me one way or another. So, this will
-	 do instead. */
-      for ( i = 0; i < NUM_FRAMES; i++ ) {
-	/* Strictly speaking I should look for existing tags and
-	   delete them, but hey. We're making fresh mp3 files, right?
-	*/
-	ID3Tag_AddFrame( tag, frames[ i ] );
-      }
-    }
-    
-    if(ID3Tag_UpdateByTagType(tag,ID3TT_ID3V2) != ID3E_NoError ) {
-      retval = FALSE;
-    }
-    
-    ID3Tag_Delete( tag );
+      if (comment != NULL) {
 
-    /* Reset permissions based on users umask to work around a bug in the
-       id3v2 library */
-    mask = umask(0);
-    umask(mask);
-    chmod(filename, 0666 & ~mask);
+	 fptag->setComment((TagLib::String) comment);
+      }
 
-  } else { /* Tag -> new() failed */
-    retval = FALSE;
+      GenreString = ID3GenreString(genre);
+      fptag->setGenre((TagLib::String) GenreString);
+      fptag->setTrack((int) tracknum);
+    
+      fp.file()->save();
+      return TRUE;
+  }
+  else {
+      return FALSE;
   }
-  
-  return retval;
 }
 
-#endif /* HAVE_ID3V2 */
-
 /* Add an ID3v1 tag to a file */
 
 gboolean ID3v1TagFile(char *filename,char *title,char *artist,char *album,
 		      char *year,char *comment,unsigned char genre,
 		      unsigned char tracknum, char *id3_encoding)
 {
-  FILE *fp;
-  ID3v1Tag tag;
-
-  fp=fopen(filename,"a");
-
-  ID3Put(tag.tag,"TAG",3,id3_encoding);
-
-  ID3Put(tag.title,title,30,id3_encoding);
-
-  ID3Put(tag.artist,artist,30,id3_encoding);
+  TagLib::FileRef fp(filename);
 
-  ID3Put(tag.album,album,30,id3_encoding);
+  if (!fp.isNull() && fp.tag()) {
+     TagLib::Tag *fptag = fp.tag();
+     char* GenreString;
+     TagLib::String Year;
+
+     GenreString = ID3GenreString(genre);
+
+     fptag->setTitle((TagLib::String) title);
+     fptag->setArtist((TagLib::String) artist);
+     fptag->setAlbum((TagLib::String) album);
+     fptag->setComment((TagLib::String) comment);
+     Year = (TagLib::String) year;
+     fptag->setYear(Year.toInt());
+     fptag->setTrack((int) tracknum);
+     fptag->setGenre((TagLib::String) GenreString);
 
-  ID3Put(tag.year,year,4,NULL);
-
-  ID3Put(tag.comment,comment,28,id3_encoding);
-
-  tag.id3v1_1_mark = 0U;
-
-  tag.tracknum=tracknum;
-  tag.genre=genre;
-
-  fwrite(&tag,sizeof(ID3v1Tag),1,fp);
-
-  fclose(fp);
-
-  return TRUE;
-}
-
-/* Copy a string padding with zeros */
-
-static void ID3Put(char *dest,char *src,int len,char *encoding)
-{
-  int pos;
-  int srclen;
-  char *conv_str;
-  gsize rb,wb;
-
-  if(encoding&&strcasecmp(encoding,"utf-8")) {
-    conv_str=g_convert_with_fallback(src,strlen(src),encoding,"utf-8",NULL,&rb,&wb,NULL);
-
-    if(!conv_str) conv_str=strdup(src);
+     fp.file()->save();
+     return TRUE;
   }
-  else conv_str=strdup(src);
-
-  srclen=strlen(conv_str);
-
-  for(pos=0;pos<len;pos++) {
-    if(pos<srclen) dest[pos]=conv_str[pos];
-    else dest[pos]=0;
+  else {
+     return FALSE;
   }
-
-  g_free(conv_str);
 }
 
 char *ID3GenreString(int genre)

