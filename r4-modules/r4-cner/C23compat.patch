Description: Avoid pointer type mismatch

Author: Rebecca N. Palmer <rebecca_palmer@zoho.com>
Bug-Debian: https://bugs.debian.org/1103198
Forwarded: no

--- a/src/ucsc/common.c
+++ b/src/ucsc/common.c
@@ -341,7 +341,7 @@ if (count > 1)
     }
 }
 
-void slUniqify(void *pList, int (*compare )(const void *elem1,  const void *elem2), void (*free)())
+void slUniqify(void *pList, int (*compare )(const void *elem1,  const void *elem2), void (*free)(void *))
 /* Return sorted list with duplicates removed.
  * Compare should be same type of function as slSort's compare (taking
  * pointers to pointers to elements.  Free should take a simple
@@ -371,7 +371,7 @@ slCat(*pList, b);
 slSort(pList,compare);
 }
 
-void slSortMergeUniq(void *pA, void *b, CmpFunction *compare, void (*free)())
+void slSortMergeUniq(void *pA, void *b, CmpFunction *compare, void (*free)(void *))
 // Merges and sorts a pair of singly linked lists leaving only unique
 // items via slUniqufy.  duplicate itens are defined by the compare routine
 // returning 0. If free is provided, items dropped from list can disposed of.
--- a/src/ucsc/common.h
+++ b/src/ucsc/common.h
@@ -423,7 +423,7 @@ void slSort(void *pList, CmpFunction *co
  * The arguments to the compare function in real, non-void, life
  * are pointers to pointers. */
 
-void slUniqify(void *pList, CmpFunction *compare, void (*free)());
+void slUniqify(void *pList, CmpFunction *compare, void (*free)(void *));
 /* Return sorted list with duplicates removed.
  * Compare should be same type of function as slSort's compare (taking
  * pointers to pointers to elements.  Free should take a simple
@@ -432,7 +432,7 @@ void slUniqify(void *pList, CmpFunction
 void slSortMerge(void *pA, void *b, CmpFunction *compare);
 // Merges and sorts a pair of singly linked lists using slSort.
 
-void slSortMergeUniq(void *pA, void *b, CmpFunction *compare, void (*free)());
+void slSortMergeUniq(void *pA, void *b, CmpFunction *compare, void (*free)(void *));
 // Merges and sorts a pair of singly linked lists leaving only unique
 // items via slUniqufy.  duplicate itens are defined by the compare routine
 // returning 0. If free is provided, items dropped from list can disposed of.
--- a/src/ucsc/hash.c
+++ b/src/ucsc/hash.c
@@ -611,7 +611,7 @@ if ((hash = *pHash) != NULL)
     }
 }
 
-void hashFreeWithVals(struct hash **pHash, void (freeFunc)())
+void hashFreeWithVals(struct hash **pHash, void (freeFunc)(void *))
 /* Free up hash table and all values associated with it. freeFunc is a
  * function to free an entry, should take a pointer to a pointer to an
  * entry. */
--- a/src/ucsc/hash.h
+++ b/src/ucsc/hash.h
@@ -244,7 +244,7 @@ void freeHashAndVals(struct hash **pHash
 /* Free up hash table and all values associated with it.
  * (Just calls freeMem on each hel->val) */
 
-void hashFreeWithVals(struct hash **pHash, void (freeFunc)());
+void hashFreeWithVals(struct hash **pHash, void (freeFunc)(void *));
 /* Free up hash table and all values associated with it. freeFunc is a
  * function to free an entry, should take a pointer to a pointer to an
  * entry. */
